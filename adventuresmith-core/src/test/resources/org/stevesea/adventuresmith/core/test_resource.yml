templates:
- |
  table1: {{table1}}
  table2: {{table2}}

  table3: {{table3}}   # recursive reference, tab3's string is a key to point at tab2

  table1 N: {{>pickN: 2 table1}}               # pick N elements (default delimeter is comma)
  table1 N: {{>pickN: 2 table1 ;&nbsp;}}       # pick N elements (supply own delim)
  table1 NDice: {{>pickN: 1d4+1d4 table1}}     # pick <dice> elements

  table2 pick: {{>pick: 1d2 table2}}    # pick from a table, but only interested in first <dice> vals

  sibling_table: {{sibling_table}}      # direct dependency
  sibling_table2: {{sibling_table2}}    # transitive dependency (brought in by sibling_table)

  nested_table: {{subtable1.subtableA}} # selecting nested table works just like selecting a any RangeMap

  # to randomly select a particular nested table, you might do something like the following
  # the template is processed repeatedly until all {{'s are gone.
  # (only up to five times). first pass through the processor, the table below will be
  # selected, second pass it'll select items from the nested tables.
  random pick of nested: {{nested_table_picker}}

  # we can also just have variables in 'definitions' map
  {{#a_list}}{{^-first}}, {{/-first}}{{this}}{{/a_list}}

  {{#a_list_of_objs}}{{val}}{{/a_list_of_objs}}

  dice:
  3d6: {{> roll: 3d6}}
  20d20+1: {{> roll: 20d20+1}}
  6d4: {{> roll: 6d4}}
  6d4: {{> rollN: 4 6d4}}  # roll 4 tiles

  state:
  {{>add: var1 1}}
  {{>accum: listVar val1}}
  {{>accum: listVar val2}}
  {{>add: var1 -3}}
  {{>add: var1 6}}
  {{>get: var1}}
  {{>get: listVar <br/>}}
  {{>roll: 1d8}}
  {{>rollKeepHigh: 2 1 1d8}}
  {{>rollKeepLow: 2 1 1d8}}

  {{>accum: listA 5}}
  {{>accum: listA 3}}
  {{>accum: listA 10}}
  {{>accum: listA 7}}
  {{>accum: listA 2}}

  {{>accum: listB apple}}
  {{>accum: listB peach}}
  {{>accum: listB apricot}}
  {{>accum: listB plum}}
  {{>accum: listB mango}}

  {{>get: listA ,}} # show list
  {{>sort: listA}} # sort int list
  {{>get: listA ,}} # show list again

  {{>sort: listB}} # sort string list
  {{>get: listB , }} # display string list

  {{>keepLast: listA 2}}  # keep last two entries of int list
  {{>get: listA ,}} # show list again (should be highest two)
  {{>sum: listA}} # summed truncated int-list (17)

  {{>keepFirst: listB 3}} # keep first three string-list entries
  {{>get: listB ,}}


  {{>accumRoll: listC 1d10}}
  {{>accumRoll: listC 1d20}}
  {{>get: listC ,}} # accumrolls


definitions:
  a_list:
  - asdfasdf
  - asdfasf2
  - asfdasdf3
  a_list_of_objs:
  - id: objid1
    val: objval1
  - id: objid2
    val: objval2
  - id: objid3
    val: objval3
  a_map:
    mapkey1: mapval1
    mapkey2: mapval2
    mapkey3: mapval3

imports:
- test_sibling

tables:
  table1:
  - t1_valA
  - t1_valB
  - t1_valC

  table2:
  - t2_valA
  - t2_valB
  - t2_valC

  nested_table_picker:
  - "subtableA - {{subtable1.subtableA}}"
  - "subtableB - {{subtable1.subtableB}}"
  - "subtableC - {{subtable2.subtableC}}"
  - "subtableD - {{subtable2.subtableD}}"

  table3:
  - "{{table2}}"

nested_tables:
  subtable1:
    subtableA:
    - subtA_val1
    - subtA_val2
    - subtA_val3
    subtableB:
    - subtB_val1
    - subtB_val2
    - subtB_val3
  subtable2:
    subtableC:
    - subtC_val1
    - subtC_val2
    - subtC_val3
    subtableD:
    - subtD_val1
    - subtD_val2
    - subtD_val3

